
### Aula 04 ###
- Primeiro sempre fazer o planejamento do site
- Estruturar o site nem que seja com um desenho as diferentes telas
- Pensar as estruturas, as imagens, etc...
- Só para ter uma referencia

### Aula 05 ###
- Sempre que você for criar um novo site no django, tem instalar o django (pip install django) no ambiente virtual
e também rodar um código (django-admin startproject (colocar o nome do projeto) .
- Com isso ele irar criar uma estrutura do seu projeto
- wsgi.py vai gerenciar a parte do servidor
- urls.py vai definir os links acessiveis
- settings.py um dos arquivos mais importantes por ser ele que diz a onde o django vai procurar determinadas
informações do seu projeto. Basicamente vai ser onde vai ficar as suas programações gerais
- Para textar o seu projeto ver se ele tá no ar e etc... no terminal a gente vai e escreve
(python manage.py runserver ( esse runserver irá criar um link que será acessivel só para a nossa maquina
onde vai estár o nosso site))

### Aula 06 ###
- manage.py é a espinha dorsal do nosso projeto ou seja a parte inicial quanto você starta um projeto ele já vem
- Quando você rodar o runserver ele já cria um banco de dados (db.sqlite3)
- Parar criar um app você tem que ir no terminal e colocar esse código (django-admin starapp (nome do app sempre no sigular))
- O que é esse "app"? Esse "app" vai ser mais uma pasta igual do "Maxflix"
- Agora a primeira coisa que a gente vai fazer nesse app de filme é criar a estrura de filmes (a que a gente fez no planejamento)
- models.py é onde será criado as tabelas do seu banco de dados

### Aula 07 ###
- Depois de ter criado nosso site e nosso app de filme, agora vamos criar um SuperUser(O usuário que manda no site, o que tem todos os "poderes" administrativos)
- Para iniciarlizar o usuário a gente vai para o teminal e vamos pausar o nosso servido (Ctrl+c) e vamos rodar um (python manage.py migrate) sempre que você modificação
no seu banco de dados você tem que rodar o migrate.py
- Sempre que você quiser fazer uma modificação no arquivo do banco de dados ou seja sempre que você editar um aquivo por exemplo: models.py que é um
arquivo que modifica o seu banco de dados você tem que ir no terminal rodar 2 codigos primeiro (python manage.py makemigrations) e depois (python manage.py migrate)
- O usuário no django já extiste ele já vem pronto então na teoria não é preciso você criar o usuário
- Criar um usuário não é criar uma nova tabela no banco de dados é adicionar uma nova informação o que é completamente diferente
e não é preciso rodar o (migrete)
- Para criar o SuperUsur (Você só vai precisar fazer isso uma vez) você tem que rodar (python manage.py createsuperuser) logo em seguida o programa irá
pedir o seu Username que você quer usar, você tambem pode por o nome do usuário ser a mesma coisa do email, o programa
irá pedir o email tambem e por ultimo ele irá pedir a senha
- link para os codigos do django manage.py (https://docs.djangoproject.com/en/3.2/ref/django-admin/)

### Aula 08 ###
- Como conectar o nosso app com o nosso projeto, a primeira coisa que tem que fazer ao criar o app é istalar ele dentro dos
aplicativos do seu projeto.
- Você vai em (settings.py)
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
Você irá ver isso e dentro dessa pasta é só acrescentar uma linha com o mesmo nome do app que você criou
exemplo: 'filme',
- A segunda coisa que você tem que fazer é ir dentro do arquivo de urls.py definir qual vai ser o link que você quer
exibir do app do filme, você tem 2 formas de adicionar o link do seu site, A primeira é que você pode gerenciar todos
os links do seu site por meio do arquivo de urls.py do seu projeto principal, A segunda opção é você em cada um dos
seus app criar um arquivo urls.py e dentro do arquivo principal do urls.py você incluir todos os links criados no
seu app
- Criar um novo arquivo no seu app criado de (urls)
- Copiar o codigo a cima (path('blog/', include('blog.urls'))) que está como exemplo e tem que importar
(import include)
- E se a sua pasth não tiver nome será o link padrão criado

### Aula 09 ###
- No arquivo settings.py tem o link para alguma duvida que o próprio django já disponibiliza para a gente
- A primeira coisa que ele faz para a gente é definir o que a gente chama de Diretorio-Base (BASE_DIR) e esse Dretorio-Base
é o nosso caminho Base ou seja onde está o seu projeto
- A segunda coisa que tem é o (SECRET_KEY) é uma chave de segurança do seu projeto
- A terceira coisa é o (DEBUG = True) isso permite que toda mudança que a gente faz nos códigos se reflita dentro do
nosso navegador
- (ALLOWED_HOSTS = []) são os hosts que ficaram permitidos
- (INSTALLED_APPS = []) são os apps que estão instaldos
- (MIDDLEWARE = []) uma outra lista que fica os processos "meio de caminho" que o django faz e já trata para a gente
- (ROOT_URLCONF = ) qual é o arquivo que tem a base de links que comando o seu site
- (TEMPLATES = []) Tem 2 partes principais, a 1 é onde vão ficar os arquivos html e que ele tambem diz o
local que onde vai estar os arquivos a 2 coisa que tem são as edições de contexto
- (WSGI_APPLICATION = ) configuração de servidor
- (DATABASES = {}) Fala qual é o banco de dados
- (AUTH_PASSWORD_VALIDATORS = []) Fala quais são os válidadores de senha que o django vai gerenciar normalmente
- (LANGUAGE_CODE =) A liguagem o seu administrativo por padrão a ligua é em inglês para colocar em portugues (pt-br)
- (TIME_ZONE =)  colocar America/Sao_Paulo
- (STATIC_URL =) Vai dizer onde vai ficar os nossos arquivos de imagens, de CSS e de JavaScript
- (DEFAULT_AUTO_FIELD =) Aqui vai definir quais vão ser as chaves primarias das nossas tabelas do banco de dados

### Aula 10 ###
- Dentro do models.py a gente vai criar class exemplo:(class Filme(models.Model):)
- Você irá colocar tudo que você planejou dentro da sua class criada exemplo: Thumb =, Titulo = , etc...
- titulo = models.CharField(max_length=100)
- descricao = models.TextField(max_length=1000)
- A difença entre o CharField e o TextField é que o CharField escreve uma linha só e o TextField quantas você quiser
- Logo em seguida eem cima de tudo isso você irá criar (LISTA_CATEGORIAS = ()) com várias tuplas dentro dela exemplo:
LISTA_CATEGORIAS = (
    (armazenar_no_bd, aparecer_pro_usuario),
    ("ANALISES", "Análises"),
    (),
)
- categorias = models.CharField(max_lenght=15, choices=LISTA_CATEGORIAS)
- thumb = models.ImageField(upload_to='thumb_filmes')
- visualizacoes = models.IntegerField(default=0)
- data_criacao = models.DateTimeField(default=timezone.now) mas para usar você tem que importa (from django.utils import timezone)
- Depois de fazer isso tudo temos que fazer o makemigratinos no terminal porem irá dar erro ele vai pedir para
instalar o (pip install pillow)
- Essa tabela toda que a gente fez ainda não aparecerá no site/admin mas se você olhar no arquivo do banco de dados(db.sqlite3) estará tudo lá
- Esse arquivo moldels.py é um dos arquivos mais importe
- Para a tabela nova criada aparecer no site/admin é preciso

### Aula 11 ###
- Sempre que você for criar uma tabela você tem que entrar no admin.py e registrar
- No admin.py você vai importar o arquivo modelos Exemplo: (from .models import Filme)
- Depois você só tem que registrar o no admin Exemplo: (admin.site.register(Filme))
- Como você não editou o seu models.py não é necessario fazer o migrate
- No site/admin já vai estar a tabela criada
- Para você adicionar um filme é só clicar na pasta e adiocionar
- Para mudar a forma que o "print"(Filme object (1)) é exibido lá no model.py dentro da class criada você tem que
definir uma função dele Exemplo:( def __str__(self):)
- A função __str__ é uma função padrao, essa função ela diz pra cada classe do pyhton o que vai aparecer se um
usuário der um print em algum intem dessa classe
- Dentro dessa função você tem quer retornar ( return self.titulo)

### Aula 12 ###
- Para as imagens aparecerem você tem que configurar no settings.py
- Só achar o STATIC_URL = Imagens staticas( Imagens que você vai subir)
- Midias = Imagens que outros usuarios vão subir
- Se você entrar no link que tem no settings (https://docs.djangoproject.com/en/4.1/howto/static-files/)
 ele vai te levar para as configurações que tem que fazer
- 1 Você tem que configurar o arquivo estaticos
- Você vai copiar o codigo que tem lá e colar no settings
- Depois disso você vai criar um novo diretorio com o mesmo nome arquivo que você colou que está na lista

### Aula 13 ###
- Para organizar mais o seu projeto seria legal você criar uma pasta dentro do "static" para cada arquivo
- O arquivo statc são composto por CSS,JavaScript,Imagens
- Ir para o site e copiar um outro codigo para criar um link para a imagen (+ static(settings.STATIC_URL, document_root=settings.STATIC_ROOT))
- Ai você cola esse codigo no urls.py do seu projeto não o do filme, igual ele pede no site mas para ficar mais
legal ao inves de colar logo em baixo do (urlpatterns) você pode (urlpatterns = urlpatterns + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT))
o urlpatterns recebe ele mesmo mais o codigo
- Mas para isso funcionar você tem que importar os 2 caras que ele pede lá no site
- Agora para permitir que seu usuario faça uploaded você faz basicamente a mesma coisa só que com outro codigo
- Porem se você reparar você tem que definir as variaveis (MEDIA_URL) e (MEDIA_ROOT) que vem no codigo
- A gente só não precisou definir a variavel statc porque já vinha definida
- Depois de definir a variavel igual a do static é só criar uma pasta tambem (media)
- Com isso faça rodar novamente o site e suba as imagen novamente
- Recapitulando o que a gente fez no arquivo de settings a gente fez as configurações da pasta de media que o usuario
sobe os arquivos e da pasta de static porque as configurações são parecidas

### Aula 14 ###



















